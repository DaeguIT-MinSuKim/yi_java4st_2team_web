-- 등록된 job 삭제할때 몇번 인지 먼저 확인하고 숫자 변경한 뒤에 삭제
BEGIN
	DBMS_JOB.REMOVE(32);
	COMMIT;
END;

CREATE OR REPLACE PROCEDURE UPDATE_JOB_EVENT
	IS
		BEGIN
			-- 실행할 SQL 넣어주기
			UPDATE EVENT SET IS_EVENT = 'y' WHERE START_DATE <= SYSDATE AND END_DATE > SYSDATE;
			UPDATE EVENT SET IS_EVENT = 'n' WHERE END_DATE < SYSDATE;
			UPDATE EVENT_BOX SET IS_EVENT = 'e' WHERE EVENT_BOX IN (SELECT EVENT_BOX FROM EVENT_BOX eb JOIN EVENT e ON eb.EVENT_CODE = e.EVENT_CODE WHERE END_DATE < SYSDATE AND eb.IS_EVENT = 'n');
		END;

-- job 생성
DECLARE
	X NUMBER;
BEGIN
	SYS.DBMS_JOB.SUBMIT
	(
	JOB => X
	, WHAT => 'UPDATE_JOB_EVENT;' -- 등록할 프로시저 명 넣어주기 (마지막에 꼭 ; 넣어주기. job 실행하면서 에러 날 수 있음)
	, NEXT_DATE => SYSDATE -- 현재시각부터 바로 시작
	, INTERVAL => 'TRUNC(SYSDATE) + 1' -- 매일 밤 12시
	, NO_PARSE => TRUE
	);
END;


-- 등록된 job 확인
SELECT * FROM USER_JOBS;