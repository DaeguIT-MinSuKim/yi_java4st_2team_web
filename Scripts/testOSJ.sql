SELECT * FROM CAR;
SELECT * FROM MEMBER;
SELECT * FROM ADMIN;
SELECT * FROM RENT;
SELECT * FROM INSURANCE;
SELECT * FROM LONGRENT;
SELECT * FROM OPTIONS;
SELECT * FROM KIND;
SELECT * FROM EVENT;
SELECT * FROM BRAND;
SELECT * FROM EVENT_BOX;
SELECT * FROM OPT_BOX;
SELECT * FROM CAR;
--조회----------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT EVENT_CODE, NAME, SALE, THUM_IMAGE, VIEW_IMAGE, IS_EVENT FROM EVENT ORDER BY EVENT_CODE DESC;
SELECT EVENT_CODE, NAME, SALE, THUM_IMAGE, VIEW_IMAGE, IS_EVENT FROM EVENT WHERE EVENT_CODE = 1;
SELECT EVENT_CODE, NAME, SALE, THUM_IMAGE, VIEW_IMAGE, IS_EVENT FROM EVENT WHERE is_event = 'y';

INSERT INTO RENT VALUES('1', 'dong', '11하5678', 1, '2020-10-23', '2020-10-24', 'y', 60000, 'test');

SELECT EVENT_CODE, NAME, SALE, THUM_IMAGE, VIEW_IMAGE, START_DATE, END_DATE, IS_EVENT FROM EVENT WHERE is_event = 'n' AND START_DATE < SYSDATE ORDER BY TO_NUMBER(EVENT_CODE) DESC;

UPDATE EVENT SET IS_EVENT = 'y' WHERE START_DATE <= SYSDATE AND END_DATE > SYSDATE;
UPDATE EVENT SET IS_EVENT = 'n' WHERE END_DATE < SYSDATE;
UPDATE EVENT_BOX SET IS_EVENT = 'e' WHERE EVENT_BOX IN (SELECT EVENT_BOX FROM EVENT_BOX eb JOIN EVENT e ON eb.EVENT_CODE = e.EVENT_CODE WHERE END_DATE < SYSDATE AND eb.IS_EVENT = 'n');
		
UPDATE EVENT_BOX SET IS_EVENT = 'n';

SELECT * 
  FROM CAR c LEFT OUTER join kind k ON c.KIND_CODE = k.KIND_CODE JOIN BRAND b ON c.BRAND_CODE = b.BRAND_CODE
 WHERE CAR_NO NOT IN (SELECT DISTINCT CAR_NO FROM rent r
 WHERE (TO_DATE(RENT_DATE) > TO_DATE('2020102100','YYYYMMDDHH24') AND TO_DATE(RENT_DATE) < TO_DATE('2020102500','YYYYMMDDHH24'))
 OR (TO_DATE(RETURN_DATE) > TO_DATE('2020102100','YYYYMMDDHH24') AND TO_DATE(RETURN_DATE) < TO_DATE('2020102500','YYYYMMDDHH24')));

SELECT * 
  FROM CAR c LEFT OUTER join kind k ON c.KIND_CODE = k.KIND_CODE JOIN BRAND b ON c.BRAND_CODE = b.BRAND_CODE
 WHERE CAR_NO = '11하5678' AND CAR_NO IN (SELECT DISTINCT CAR_NO FROM rent r
 WHERE (TO_DATE(RENT_DATE) > TO_DATE('2020102209','YYYYMMDDHH24') AND TO_DATE(RENT_DATE) < TO_DATE('2020103009','YYYYMMDDHH24'))
 OR (TO_DATE(RETURN_DATE) > TO_DATE('2020102209','YYYYMMDDHH24') AND TO_DATE(RETURN_DATE) < TO_DATE('2020103009','YYYYMMDDHH24')));

SELECT * FROM event_box;

SELECT EVENT_BOX, EVENT_CODE, ID, IS_EVENT FROM EVENT_BOX WHERE EVENT_CODE = 1 AND ID = 'dong';

INSERT INTO EVENT_BOX(EVENT_CODE, ID) VALUES(1, 'dong');

UPDATE EVENT_BOX SET IS_EVENT = 'n' WHERE ID = 'dong';
UPDATE EVENT SET IS_EVENT = 'n' WHERE EVENT_CODE = 2;

DELETE FROM EVENT_BOX;

SELECT * FROM USER_TABLES;

SELECT * FROM MEMBER;

SELECT * FROM USER_TABLES;

select count(*) from EVENT;

SELECT * FROM (SELECT rownum RN, a.* FROM (SELECT * FROM EVENT ORDER BY EVENT_CODE DESC) a) WHERE RN BETWEEN 1 AND 5 ORDER BY RN;
SELECT EVENT_CODE, NAME, SALE, THUM_IMAGE, VIEW_IMAGE, IS_EVENT FROM EVENT ORDER BY TO_NUMBER(EVENT_CODE) DESC;

SELECT * FROM car c LEFT OUTER join kind k ON c.KIND_CODE = k.KIND_CODE LEFT OUTER JOIN BRAND b ON c.BRAND_CODE = b.BRAND_CODE ORDER BY CAR_COUNT DESC;

UPDATE CAR SET CAR_COUNT = 1 WHERE CAR_NO = '11하5678';



SELECT count(*) FROM event where EVENT_CODE LIKE 2;

SELECT * FROM (SELECT rownum RN, a.* FROM (SELECT * FROM EVENT ORDER BY EVENT_CODE DESC) a) WHERE RN BETWEEN 0 AND 15 and NAME LIKE '%' || '이벤트' || '%' ORDER BY EVENT_CODE DESC;

SELECT * FROM EVENT WHERE ;

UPDATE EVENT SET START_DATE = '2020-10-01', IS_EVENT = 'y' WHERE EVENT_CODE = 2;

UPDATE EVENT SET IS_EVENT = 'y' WHERE START_DATE <= SYSDATE AND END_DATE > SYSDATE;
UPDATE EVENT SET IS_EVENT = 'n' WHERE END_DATE < SYSDATE;

SELECT * FROM EVENT_BOX;

SELECT EVENT_BOX FROM EVENT_BOX eb JOIN EVENT e ON eb.EVENT_CODE = e.EVENT_CODE WHERE END_DATE < SYSDATE;

UPDATE EVENT_BOX SET IS_EVENT = 'y' WHERE EVENT_BOX = 2;

UPDATE EVENT_BOX SET IS_EVENT = 'y' WHERE EVENT_BOX IN (SELECT EVENT_BOX FROM EVENT_BOX eb JOIN EVENT e ON eb.EVENT_CODE = e.EVENT_CODE WHERE END_DATE < SYSDATE);

SELECT * FROM (SELECT rownum RN,a.* FROM (SELECT * FROM EVENT ORDER BY EVENT_CODE desc) a ) WHERE rn BETWEEN 1 AND 15 AND IS_EVENT LIKE '%' || 'n' || '%' AND START_DATE > SYSDATE;


-- 배치(스케줄러)

-- 프로시저 생성
CREATE OR REPLACE PROCEDURE UPDATE_JOB_EVENT
	IS
		BEGIN
			-- 실행할 SQL 넣어주기
			UPDATE EVENT SET IS_EVENT = 'y' WHERE START_DATE <= SYSDATE AND END_DATE > SYSDATE;
			UPDATE EVENT SET IS_EVENT = 'n' WHERE END_DATE < SYSDATE;
			UPDATE EVENT_BOX SET IS_EVENT = 'y' WHERE EVENT_BOX IN (SELECT EVENT_BOX FROM EVENT_BOX eb JOIN EVENT e ON eb.EVENT_CODE = e.EVENT_CODE WHERE END_DATE < SYSDATE);
		END;

-- job 생성
DECLARE
	X NUMBER;
BEGIN
	SYS.DBMS_JOB.SUBMIT
	(
	JOB => X
	, WHAT => 'UPDATE_JOB_EVENT;' -- 등록할 프로시저 명 넣어주기 (마지막에 꼭 ; 넣어주기. job 실행하면서 에러 날 수 있음)
	, NEXT_DATE => SYSDATE -- 현재시각부터 바로 시작
	, INTERVAL => 'TRUNC(SYSDATE) + 1' -- 매일 밤 12시
	, NO_PARSE => TRUE
	);
END;
/*
 * sysdate + 7			7일에 한번
 * sysdate + 1			하루에 한번
 * sysdate + 1/24		한 시간에 한번
 * sysdate + 1/24/60	1분에 한번(1/1440)
 * sysdate + 1/24/60/60	1ch(1/86400)
 * 
 * TRUNC(SYSDATE) + 1			매일 밤 12시
 * TRUNC(SYSDATE) + 1 + 3/24	매일 새벽 3시
 * TRUNC(SYSDATE) + 1 + 5/24	매일 새벽 5시
 * TRUNC(SYSDATE) + 20/24		매일 밤 10시
 * NEXT_DAY(TRUNC(SYSDATE),'MONDAY')+15/25	매주 월요일 오후 3시 정각에 job 수행
 * TRUNC(LAST_DAY(SYSDATE))+1				매월 1일 밤 12시에 job 수행
 * TRUNC(LAST_DAY(SYSDATE))+1+8/24+30/1440	매월 1일 오전 8시 30분
 * 
 * NO_PARSE : 만약 NO_PARSE가 FALSE로 설정(이것이 기본값입니다.)되면, 오라클은 job과 연관된 프로시저를 파싱합니다. 
 * 만약 NO_PARSE가 TRUE로 설정되면, 오라클은 job과 연관된 프로시저를 job이 처음 실행될 때 파싱합니다. 예를 들어, 만약 job과 관련된 테이블이 생성되기 전에 job 을 submit 하기를 원한다면 NO_PARSE를 TRUE 로 설정하면 됩니다.
 */

-- 등록된 job 확인
SELECT * FROM USER_JOBS;

-- 마지막 실행시간, 다음 실행시간, 실행시간, 활성화 비활성화 여부, 실패 횟수, 실핼항 Object
SELECT LAST_DATE, NEXT_DATE, TOTAL_TIME, BROKEN, FAILURES, WHAT FROM USER_JOBS;


-- JOB을 강제 실행
BEGIN
	DBMS_JOB.RUN(23);
	COMMIT;
END

-- 등록되어 있는 JOB 삭제
BEGIN
	DBMS_JOB.REMOVE(31);
	COMMIT;
END;

-- 작업 비활성화 
BEGIN
	DBMS_JOB.BROKEN(25, false);
	COMMIT;
END;



 
select a.sid, a.serial#
from v$session a, v$lock b, dba_objects c
where a.sid=b.sid and
b.id1=c.object_id and
b.type='TM';

alter system kill session '9, 2816';


SELECT TO_CHAR(RENT_DATE, 'yyyy-MM') AS RENT_DATE, (SELECT COUNT(*) FROM MEMBER m LEFT JOIN RENT r ON m.ID = r.ID GROUP BY TO_CHAR(r.RENT_DATE, 'yyyy-MM') )
	FROM RENT
  GROUP BY TO_CHAR(RENT_DATE, 'yyyy-MM');

SELECT COUNT(*) FROM MEMBER m LEFT JOIN RENT r ON m.ID = r.ID GROUP BY m.GENDER WHERE ;
	
SELECT * FROM MEMBER;
SELECT * FROM rent;

SELECT TO_CHAR(r.RENT_DATE, 'yyyy-MM') AS RENT_DATE, m.GENDER AS count FROM RENT r JOIN MEMBER m ON r.ID = m.ID GROUP BY m.GENDER;

SELECT TO_CHAR(e.EVENT_CODE) AS EVENT_NUM, COUNT(*) AS EVENT_COUNT FROM EVENT e JOIN EVENT_BOX eb ON eb.EVENT_CODE = e.EVENT_CODE GROUP BY TO_CHAR(e.EVENT_CODE) ORDER BY EVENT_NUM